vector<int> printingLongestIncreasingSubsequence(vector<int> arr, int n) {
	 vector<int> nums = arr;
    vector<int> dp(nums.size(), 1);
    vector<int> index(nums.size());
    vector<int> ans;
    int newind;
    for (int i = 0; i < nums.size(); i++) {
        index[i] = i;
    }
    int maxi = 0;
    for (int i = 0; i < nums.size(); i++) {
        for (int prev_ind = 0; prev_ind < i; prev_ind++) {
            if (nums[i] > nums[prev_ind] && dp[prev_ind]+1>dp[i]) {
                dp[i] =  1 + dp[prev_ind];
                index[i] = prev_ind;
                
            }
        }
		
        if (dp[i] > maxi) {
            maxi = dp[i];
            newind = i;
        }
    }
	ans.push_back(newind);
    while (newind != index[newind]) {
        newind = index[newind];
        ans.push_back(nums[newind]);
    }
    ans.push_back(nums[0]);
    reverse(ans.begin(), ans.end());
    return ans;

}
